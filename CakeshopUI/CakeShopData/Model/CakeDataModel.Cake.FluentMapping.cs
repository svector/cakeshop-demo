//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using NHibernate Fluent Mapping template.
// Code is generated on: 11/1/2016 12:07:29 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using FluentNHibernate.Mapping;
using FluentNHibernate.MappingModel.Collections;

namespace CakeShopData.Model
{
    /// <summary>
    /// There are no comments for CakeMap in the schema.
    /// </summary>
    public partial class CakeMap : ClassMap<Cake>
    {
        /// <summary>
        /// There are no comments for CakeMap constructor in the schema.
        /// </summary>
        public CakeMap()
        {
              Table(@"cake");
              LazyLoad();
              Id(x => x.Id)
                .Column("Id")
                .CustomType("Int32")
                .Access.Property()                
                .GeneratedBy.Identity();
              Map(x => x.Description)    
                .Column("Description")
                .CustomType("String")
                .Access.Property()
                .Generated.Never();
              Map(x => x.Type)    
                .Column("Type")
                .CustomType("String")
                .Access.Property()
                .Generated.Never();
              Map(x => x.Price)    
                .Column("Price")
                .CustomType("Decimal")
                .Access.Property()
                .Generated.Never();
              Map(x => x.PictureUri)    
                .Column("PictureUri")
                .CustomType("String")
                .Access.Property()
                .Generated.Never();
              ExtendMapping();
        }

        #region Partial Methods

        partial void ExtendMapping();

        #endregion
    }

}
